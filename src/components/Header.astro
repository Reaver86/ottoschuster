---
import { Image } from "astro:assets";
import deutschlandFlagge from "../images/deutschland_flagge.webp";
import rumänienFlagge from "../images/rumänien_flagge.webp";

import { getRelativeLocaleUrl } from "astro:i18n";

const localeIsRomanian = Astro.url.pathname.includes("/ro/");
const pathWithoutLocale = Astro.url.pathname.split("/")[2];
---

<header>
  <div class="content">
    <h1>Übersetzungsbüro Schuster</h1>

    <div class="language-switcher">
      <a
        id="de"
        class={!localeIsRomanian ? "active" : ""}
        href={getRelativeLocaleUrl("de", pathWithoutLocale)}
        ><Image
          src={deutschlandFlagge}
          alt="Zu deutscher Sprache wechseln"
          width="50"
        /></a
      >
      <a
        id="ro"
        class={localeIsRomanian ? "active" : ""}
        href={getRelativeLocaleUrl("ro", pathWithoutLocale)}
        ><Image
          src={rumänienFlagge}
          alt="Zu rumänischer Sprache wechseln"
          width="50"
        /></a
      >
    </div>

    <button
      class="hamburger"
      aria-controls="primary-navigation"
      aria-expanded="false"
      aria-label="Öffne Navigationsmenü"
    >
      <svg fill="var(--button-color)" viewBox="0 0 100 100" width="50">
        <rect class="line top" width="80" height="10" x="10" y="25" rx="5">
        </rect>
        <rect class="line middle" width="80" height="10" x="10" y="45" rx="5">
        </rect>
        <rect class="line bottom" width="80" height="10" x="10" y="65" rx="5">
        </rect>
      </svg>
    </button>

    <nav>
      <ul>
        <li>
          <a
            class={pathWithoutLocale === "" ? "active" : ""}
            href={getRelativeLocaleUrl(localeIsRomanian ? "ro" : "de", "")}
            >Startseite</a
          >
        </li>
        <li>
          <a
            class={pathWithoutLocale === "preise" ? "active" : ""}
            href={getRelativeLocaleUrl(
              pathWithoutLocale === "preise" ? "ro" : "de",
              "preise",
            )}>Preise</a
          >
        </li>
        <li>
          <a
            class={pathWithoutLocale === "kontakt" ? "active" : ""}
            href={getRelativeLocaleUrl(
              pathWithoutLocale === "kontakt" ? "ro" : "de",
              "kontakt",
            )}>Kontakt</a
          >
        </li>
      </ul>
    </nav>
  </div>
</header>

<style>
  header {
    position: fixed;
    top: 0;
    padding: 4px;
    width: 100%;
    z-index: 1000;
    border-bottom: 1px solid var(--accent);
    background-color: white;
  }
  .content {
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: 12px;
  }

  h1 {
    font-size: clamp(1rem, 3vw, 3rem);
    font-weight: var(--font-weight-4);
  }

  .language-switcher {
    align-items: end;
    display: flex;
    gap: 4px;

    & .active {
      border: 2px solid black;
    }
  }

  .hamburger {
    display: none;
    --button-color: #333;
    background: transparent;
    border: none;
    cursor: pointer;

    & .line {
      transition:
        y 300ms ease-in 300ms,
        rotate 300ms ease-in,
        opacity 0ms 300ms;
      transform-origin: center;
    }

    &[aria-expanded="true"] .line {
      transition:
        y 300ms ease-in,
        rotate 300ms ease-in 300ms,
        opacity 0ms 300ms;
    }

    &[aria-expanded="true"] :is(.top, .bottom) {
      y: 45;
    }

    &[aria-expanded="true"] .top {
      rotate: 45deg;
    }

    &[aria-expanded="true"] .middle {
      opacity: 0;
    }

    &[aria-expanded="true"] .bottom {
      rotate: -45deg;
    }

    &:hover {
      background-color: var(--accent);
      border-radius: 4px;
      & svg {
        padding: 4px;
      }
    }
  }

  nav {
    & ul {
      margin: 0;
      padding: 0;
      list-style: none;

      display: inline-flex;
      gap: 1em;
    }

    & li {
      list-style: none;
    }

    & a {
      color: black;
      text-decoration: none;
      text-transform: uppercase;
    }
  }

  @media (width > 800px) {
    nav {
      & li {
        display: inline-block;
        margin-left: 40px;
        padding-top: 23px;

        position: relative;
      }

      & a {
        font-size: 14px;

        &::before {
          content: "";
          display: block;
          height: 5px;
          background-color: var(--accent);
          position: absolute;
          top: 0;
          width: 0;
          transition: all ease-in-out 250ms;
        }

        &:hover,
        &:active {
          &::before {
            width: 100%;
          }
        }
      }
    }
  }

  @media (width <= 800px) {
    .hamburger {
      display: block;
    }

    nav {
      display: flex;
      justify-content: center;
      position: fixed;
      top: 100px;
      right: -300px;
      padding: 20px;
      background-color: white;
      opacity: 0.9;
      transition: right 300ms ease-in-out;

      & ul {
        flex-direction: column;
      }

      & li {
        border: 2px solid black;
        border-radius: 4px;
      }

      & a {
        padding: 12px 36px;
        user-select: none;
        display: flex;
        width: 200px;
        justify-content: center;

        &:hover {
          background-color: var(--accent);
          color: white;
        }
      }

      &.expanded {
        right: 0;
      }
    }
  }

  @media (width <= 400px) {
    nav {
      left: 0;
      right: 0;
      top: unset;
      bottom: -300px;
      opacity: 1;
      transition: bottom 300ms ease-in-out;

      &.expanded {
        bottom: 0;
      }
    }
  }
</style>

<script>
  document.addEventListener("astro:page-load", () => {
    const hamburgerButton = document.querySelector(
      ".hamburger",
    ) as HTMLButtonElement;

    hamburgerButton.addEventListener("click", () => {
      document.querySelector("nav")?.classList?.toggle("expanded");

      const currentAriaExpanded = hamburgerButton.getAttribute("aria-expanded");
      hamburgerButton.setAttribute(
        "aria-expanded",
        currentAriaExpanded === "false" ? "true" : "false",
      );
    });
  });
</script>
